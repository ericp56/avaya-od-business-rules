package flow;

import java.math.BigDecimal;
import java.util.Collection;

import com.avaya.sce.runtimecommon.SCESession;
import com.nextivr.demo.br.MainMenuEval;
import com.nextivr.demo.br.MainMenuEval.NextAction;
import com.nextivr.demo.model.Account;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing
 * mathematic operations, and collection iteration), conditional evaluation to
 * control callflow execution based on variable values, and logging/tracing
 * statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted. If no "true"
 * conditions are encountered, then all data actions will be executed/evaluated
 * and the application will proceed to the "Default" servlet. Last generated by
 * Orchestration Designer at: 2018-MAY-15 11:58:45 AM
 */
public class mainMenuEval extends com.avaya.sce.runtime.Data {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at:
	 * 2018-MAY-15 11:58:45 AM
	 */
	public mainMenuEval() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2018-MAY-18  08:56:44 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}

	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2018-MAY-18  08:56:44 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}

	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2018-MAY-18  08:56:44 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// switch start (22)
		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "action", com.avaya.sce.runtime.Expression.STRING_EQUAL, "actions:MAIN_MENU", true).setDebugId(22)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("transferSkill", "1001", true).setDebugId(32));
			actions.add(new com.avaya.sce.runtime.Next("mainMenu", "Main Menu").setDebugId(25));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "action", com.avaya.sce.runtime.Expression.STRING_EQUAL, "actions:BILLING", true).setDebugId(26)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("transferSkill", "1002", true).setDebugId(33));
			actions.add(new com.avaya.sce.runtime.Next("billingTransfer", "Billing").setDebugId(27));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "action", com.avaya.sce.runtime.Expression.STRING_EQUAL, "actions:SALES", true).setDebugId(28)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("transferSkill", "1003", true).setDebugId(34));
			actions.add(new com.avaya.sce.runtime.Next("salesMenu", "Sales").setDebugId(29));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "action", com.avaya.sce.runtime.Expression.STRING_EQUAL, "actions:GENERAL", true).setDebugId(30)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("transferSkill", "1000", true).setDebugId(35));
			actions.add(new com.avaya.sce.runtime.Next("generalTransfer", "General").setDebugId(31));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("generalTransfer", "Agent").setDebugId(24));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	boolean alreadyProcessed = false;

	@Override
	public boolean evaluateActions(Collection actions, SCESession mySession) throws Exception {

		if (!alreadyProcessed) {
			 //evaluateActions will run multiple iterations for a Data servlet.  we want it to run in the first iteration only.
			alreadyProcessed = true;

			//build the Account model from OD data
			Account acct = buildAccountFromAppData(mySession);
			//the business rule...
			MainMenuEval eval = new MainMenuEval();

			//log the acct in the application detail logs.  optional
			actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(
					com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS,
					com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", acct.toString(), ""));

			//run the business rule
			NextAction nextAction = eval.getNextAction(acct);

			//assign the result to the action variable.  This shows up in application detail logs and trace logs.
			actions.add(
					new com.avaya.sce.runtime.varoperations.Assign("action", nextAction.name(), true));
		}

		return super.evaluateActions(actions, mySession);
	}

	private Account buildAccountFromAppData(SCESession mySession) {
		String accountNumber = mySession.getVariableFieldValue(
				IProjectVariables.ACCOUNT + ":" + IProjectVariables.ACCOUNT_FIELD_ACCOUNT__NUMBER);

		String primaryPhone = mySession
				.getVariableFieldValue(IProjectVariables.ACCOUNT + ":" + IProjectVariables.ACCOUNT_FIELD_PHONE_1);

		String accountStatus = mySession
				.getVariableFieldValue(IProjectVariables.ACCOUNT + ":" + IProjectVariables.ACCOUNT_FIELD_STATUS);

		BigDecimal accountBalance = new BigDecimal(mySession
				.getVariableFieldValue(IProjectVariables.ACCOUNT + ":" + IProjectVariables.ACCOUNT_FIELD_BALANCE));

		String zipCode = mySession
				.getVariableFieldValue(IProjectVariables.ACCOUNT + ":" + IProjectVariables.ACCOUNT_FIELD_ZIP);

		Account acct = new Account(accountNumber, primaryPhone, accountStatus, accountBalance, zipCode);

		return acct;
	}
}
